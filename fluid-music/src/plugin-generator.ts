import * as R from 'ramda'
import { guess } from './cybr/plugin-report-utils'

// The section below contains methods for creating parameter keys

export const upperFirstLetter = (string: string) => {
  const s = Array.from(string)
  s[0] = R.toUpper(s[0])
  return R.join('', s)
}

export const lowerFirstLetter = (string: string) => {
  const s = Array.from(string)
  s[0] = R.toLower(s[0])
  return R.join('', s)
}

export const isUpperCase = (s) => s.length && (s.toUpperCase() === s)

/**
 * Create a version of the word that with a lower case first letter.
 */
export const firstWord = (word: string) => {
  if (word.length === 1 || isUpperCase(word)) return word.toLowerCase();
  // We have a lower or mixed case word. Decide based on the second letter.
  return isUpperCase(word[1]) ? word.toLowerCase() : lowerFirstLetter(word);
};

export const restWord = (word: string) => {
  if (word.length === 1) return word.toUpperCase();
  word = isUpperCase(word) ? word.toLowerCase() : word;
  // We have a lower or mixed case word. Decide based on the second letter.
  word = isUpperCase(word[1]) ? word.toLowerCase() : word;
  return upperFirstLetter(word);
}

/**
 * Generate a camelCase name from a parameter name
 */
export const camelCaseFromParamName = (paramName: string) => {
  return paramName
    .replace(/[\(\):\# \_\-\\\/]+/g, '-')  // Replace misc chars with '-'
    .split('-')                            // create an array of words
    .filter(s => s.length)
    .map((word, i) => {
      if (i === 0) return firstWord(word); // treat 1st word as special case
      return restWord(word);               // remaining words treated the same
    })
    .join('')
}

// Convert to an acceptable variable name
const makeVarName = (name: string) => name.replace(/[:\# \_\-\\\/]+/g, '')

/**
 * Create a plugin adapter Typescript module from a plugin report
 * @param report A plugin report object generated by cybr. Step size must be odd
 */
export function generatePluginModule(report: any) {
  const pluginName = report.pluginName
  const pluginType = {
    'VST': 'PluginType.VST2',
    'VST2': 'PluginType.VST2',
    'VST3': 'PluginType.VST3'
  }[report.pluginType]

  const className = makeVarName(pluginName)                 // DragonflyRoom
  const parametersInterfaceName = className + 'Parameters'; // DragonflyRoomParameters

  let output = `import { PluginType, FluidPlugin, PluginAutomationEvent } from './plugin';
const pluginName = '${pluginName}'
const pluginType = '${pluginType}'

export interface ${parametersInterfaceName} {
`
  output += report.params.map(paramInfo => {
    if (!paramInfo.guess) guess(paramInfo);
    console.log(paramInfo)
    if (!paramInfo.paramKey) paramInfo.paramKey = camelCaseFromParamName(paramInfo.name)
    // For now, I'm assuming that every parameter is a number. This may change.
    return `  ${paramInfo.paramKey}? : number;`
  }).join('\n') + '\n}\n'

  return output
}
